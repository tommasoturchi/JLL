########################################################################
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this file, to deal in the File without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the File, and to permit persons to whom the
# File is furnished to do so, subject to the following condition:
#
# THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE FILE OR
# THE USE OR OTHER DEALINGS IN THE FILE.

########################################################################
# The standard OMakefile.
# You will usually need to modify this file for your project.

# Delete this line once you have configured this file
# eprintln($(CWD)/OMakefile is not configured)

########################################################################
# Phony targets are scoped, so you probably want to declare them first.
#

# .PHONY: all install clean

########################################################################
# Subdirectories.
# You may want to include some subdirectories in this project.
# If so, define the subdirectory targets and uncomment this section.
#

# .SUBDIRS:

.PHONY: all lib exe clean install

MENHIR_ENABLED = true
MENHIR_FLAGS += --infer --explain

.SUBDIRS: src


# ----------------------------------------------------------------

# Define an ocamldep wrapper that creates fake generated files so that
# ocamldep can see that these files exist (or are supposed to exist).
# This is required to work around ocamldep's brokenness.

WrapScanner(command) =
    $(OCAML) $(OCAMLDEPWRAPPER) $(GENERATED) - $(command)

# ----------------------------------------------------------------

# Dependencies.

.SCANNER: %.cmi: %.mli
	WrapScanner($(OCAMLDEP) $<)

.SCANNER: %.cmx %.cmo %.o: %.ml
	WrapScanner($(OCAMLDEP) $<)

# ----------------------------------------------------------------

# Compilation.

%.cmi: %.mli
	$(OCAMLC) $(INCLUDE) $(BFLAGS) -c $<

%.cmo: %.ml
	$(OCAMLC) $(INCLUDE) $(BFLAGS) -c $<

%.cmx %.o: %.ml
	$(OCAMLOPT) $(INCLUDE) $(OFLAGS) -c $<

%.ml: %.mll
	$(OCAMLLEX) $(LGFLAGS) $<

%.ml %.mli: %.mla
	$(ALPHACAML) $<

# ----------------------------------------------------------------

# Menhir: multiple file projects.

MenhirMulti(target, sources, options) =
    TARGETS   = $(file $(target).ml $(target).mli)
    SOURCES   = $(file $(sources))
    $(TARGETS): $(SOURCES)
	$(MENHIR) --ocamlc "$(OCAMLC)" $(PGFLAGS) --base $(target) $(options) $(SOURCES)
    .SCANNER: $(TARGETS): $(SOURCES)
	WrapScanner($(MENHIR) --ocamldep "$(OCAMLDEP)" --depend --base $(target) $(options) $(SOURCES))

# Menhir: single file projects.

MenhirMono(target, options) =
    MenhirMulti($(target), $(target).mly, $(options))

# Menhir: automatic single file projects.
# This causes every .mly file to be viewed as a single file project.

MenhirAuto() =
    foreach (target => $(glob *.mly))
	MenhirMono($(removesuffix $(target)), $(EMPTY))

# ----------------------------------------------------------------


########################################################################
# C configuration.
# Delete this section if you are not building C files.
#

################################################
# Configuration.  You might want to modify any of these
# configuration variables.
#

# CFLAGS +=
# ASFLAGS +=
# LDFLAGS +=
# INCLUDES +=

################################################
# Uncomment the following section if you want
# to build a C program in the current directory.
#

# CFILES[] =
#    file1
#    main
#
# MAIN = main
#
# .DEFAULT: $(CProgram $(MAIN), $(CFILES))

################################################
# Uncomment the following section if you want to build a C library
# in the current directory.
#

# LIBFILES[] =
#    file1
#    file2
#
# LIB = libxxx
#
# .DEFAULT: $(StaticCLibrary $(LIB), $(LIBFILES))

########################################################################
# OCaml configuration.
# Delete this section if you are not building OCaml files.
#

################################################
# Configuration.  You may want to modify any of these configuration
# variables.
#

#
# This project requires ocamlfind (default - false).
#
# USE_OCAMLFIND = true
#
# OCAMLPACKS[] =
#    pack1
#    pack2
#
# if $(not $(OCAMLFIND_EXISTS))
#    eprintln(This project requires ocamlfind, but is was not found.)
#    eprintln(You need to install ocamlfind and run "omake --configure".)
#    exit 1

#
# Include path
#
# OCAMLINCLUDES +=

#
# Compile native or byte code? 
#
# The default values are defined as follows:
#
# NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
# BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

#
# Various options
#
# OCAMLFLAGS    +=
# OCAMLCFLAGS   +=
# OCAMLOPTFLAGS +=
# OCAML_LINK_FLAGS +=
# OCAML_BYTE_LINK_FLAGS +=
# OCAML_NATIVE_LINK_FLAGS +=

################################################
# Generated files
#
# Workaround for the fact that ocamldep does not pay attention to .mll
# and .mly files.
#
# OCamlGeneratedFiles(parser.ml lexer.ml)

################################################
# Build an OCaml library
#

# FILES[] =
#    file1
#    file2
#
# LIB = main
#
# .DEFAULT: $(OCamlLibrary $(LIB), $(FILES))

################################################
# Build an OCaml program
#

# FILES[] =
#    file1
#    file2
#
# PROGRAM =
# OCAML_LIBS +=
# OCAML_CLIBS +=
# OCAML_OTHER_LIBS +=
# OCAML_LIB_FLAGS +=
#
# .DEFAULT: $(OCamlProgram $(PROGRAM), $(FILES))